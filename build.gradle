buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: '4.0.4'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'idea'

group = "dev.naturecodevoid" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.modName

repositories {
    jcenter()
    maven {
        url = "https://repo.sk1er.club/repository/maven-public"
    }
}

dependencies {
    compile "club.sk1er:Vigilance:78-$project.mcVersion-SNAPSHOT"
    compile "club.sk1er:Elementa:1.7.1-$project.mcVersion"
}

targetCompatibility = sourceCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'

minecraft {
    version = project.forgeVersion
    runDir = "run"
    mappings = "stable_22"
    makeObfSourceJar = true

    // https://github.com/BiscuitDevelopment/SkyblockAddons/blob/master/build.gradle#L30
    replace("@MOD_ID@": project.modId,
            "@MOD_NAME@": project.modName,
            "@VERSION@": project.version,
            "@MOD_ACCEPTED@": project.acceptedMinecraftVersions)
    replaceIn("${project.modName}.java")

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version, 'name': project.modName, 'modid': project.modId
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

shadowJar {
    minimize()
    classifier = ''
}


reobf { shadowJar { mappingType = 'SEARGE' } }
tasks.reobfShadowJar.mustRunAfter shadowJar


configurations {
    external
    compile.extendsFrom external
}

build.dependsOn shadowJar